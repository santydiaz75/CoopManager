/*
 * FrmGeneraLiquidacion.java
 *
 * Created on __DATE__, __TIME__
 */

package winUIPackage;

import java.awt.AWTKeyStroke;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import org.hibernate.ReplicationMode;
import org.hibernate.Transaction;

import entitiesPackage.Cosecheros;
import entitiesPackage.Entity;
import entitiesPackage.Liquidaciones;
import entitiesPackage.LiquidacionesId;
import entitiesPackage.Message;

import sessionPackage.MySession;

/**
 *
 * @author  __USER__
 */
public class FrmGeneraLiquidacion extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private MySession session;
	private java.awt.Frame parent;
	private Entity entity = new Entity();
	SwingWorker worker;
	
	boolean toModify = false;

	/** Creates new form FrmParamFacturas */
	public FrmGeneraLiquidacion(java.awt.Frame parent, MySession session,
			boolean modal) {
		super(parent, modal);
		try {
			this.session = session;
			this.parent = parent;
			entity.setSession(session);
			initComponents();
			progressbar.setVisible(false);
			configureKeys();

		} catch (RuntimeException he) {
			Message.ShowRuntimeError(parent, "FrmGeneraLiquidacion()", he);
		}
	}

	private void configureKeys() {
		try {
			Set<AWTKeyStroke> teclasTab = new HashSet<AWTKeyStroke>();
			teclasTab.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
			teclasTab.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_DOWN, 0));
			teclasTab.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_TAB, 0));
			this.setFocusTraversalKeys(
					KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, teclasTab);

		} catch (RuntimeException he) {
			Message.ShowRuntimeError(parent,
					"FrmGeneraLiquidacion.configureKeys", he);
		}
	}

	private boolean validateData() {

		try {
			if (txtMes.getText().equals("")) {
				Message.ShowValidateMessage(parent, "Debe indicar un mes.");
				txtMes.requestFocus();
				return (false);
			} else {
				try {
					txtMes.commitEdit();
				} catch (ParseException e) {
					Message.ShowValidateMessage(parent,
							"El tipo de datos indicado no es válido.");
					txtMes.requestFocus();
					return (false);
				}
			}
			if (txtSemanaDesde.getText().equals("")) {
				Message.ShowValidateMessage(parent,
						"Debe indicar la semana de incio.");
				txtSemanaDesde.requestFocus();
				return (false);
			} else {
				try {
					txtSemanaDesde.commitEdit();
				} catch (ParseException e) {
					Message.ShowValidateMessage(parent,
							"El tipo de datos indicado no es válido.");
					txtSemanaDesde.requestFocus();
					return (false);
				}
			}
			if (txtSemanaHasta.getText().equals("")) {
				Message.ShowValidateMessage(parent,
						"Debe indicar la semana final.");
				txtSemanaHasta.requestFocus();
				return (false);
			} else {
				try {
					txtSemanaHasta.commitEdit();
				} catch (ParseException e) {
					Message.ShowValidateMessage(parent,
							"El tipo de datos indicado no es válido.");
					txtSemanaHasta.requestFocus();
					return (false);
				}
			}
			if (txtFecha.getText().equals("")) {
				Message.ShowValidateMessage(parent, "Debe indicar una fecha.");
				txtFecha.requestFocus();
				return (false);
			} else {
				try {
					txtFecha.commitEdit();
				} catch (ParseException e) {
					Message.ShowValidateMessage(parent,
							"El tipo de datos indicado no es válido.");
					txtFecha.requestFocus();
					return (false);
				}
			}

			return (true);
		} catch (RuntimeException he) {
			Message.ShowRuntimeError(parent,
					"FrmGeneraLiquidacion.validateData()", he);
			return (false);
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		lblSemanaDesde = new javax.swing.JLabel();
		txtSemanaDesde = new javax.swing.JFormattedTextField();
		lblSemanaHasta = new javax.swing.JLabel();
		txtSemanaHasta = new javax.swing.JFormattedTextField();
		btnOk = new javax.swing.JButton();
		lblSemanaDesde1 = new javax.swing.JLabel();
		txtMes = new javax.swing.JFormattedTextField();
		lblFecha = new javax.swing.JLabel();
		txtFecha = new javax.swing.JFormattedTextField();
		progressbar = new javax.swing.JProgressBar();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Generaci\u00f3n de liquidaciones");
		setResizable(false);

		lblSemanaDesde.setFont(new java.awt.Font("Segoe UI", 1, 14));
		lblSemanaDesde.setForeground(new java.awt.Color(255, 0, 0));
		lblSemanaDesde.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblSemanaDesde.setText("Semana desde");
		lblSemanaDesde
				.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

		txtSemanaDesde.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		txtSemanaDesde
				.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
						new javax.swing.text.NumberFormatter(
								new java.text.DecimalFormat("#0"))));
		txtSemanaDesde.setHorizontalAlignment(javax.swing.JTextField.LEFT);
		txtSemanaDesde.setFont(new java.awt.Font("Segoe UI", 0, 14));

		lblSemanaHasta.setFont(new java.awt.Font("Segoe UI", 1, 14));
		lblSemanaHasta.setForeground(new java.awt.Color(255, 0, 0));
		lblSemanaHasta.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblSemanaHasta.setText("Semana hasta");
		lblSemanaHasta
				.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

		txtSemanaHasta.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		txtSemanaHasta
				.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
						new javax.swing.text.NumberFormatter(
								new java.text.DecimalFormat("#0"))));
		txtSemanaHasta.setHorizontalAlignment(javax.swing.JTextField.LEFT);
		txtSemanaHasta.setFont(new java.awt.Font("Segoe UI", 0, 14));

		btnOk.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/imagesPackage/ok.png"))); // NOI18N
		btnOk.setToolTipText("Aceptar");
		btnOk.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
		btnOk.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				btnOkMousePressed(evt);
			}
		});

		lblSemanaDesde1.setFont(new java.awt.Font("Segoe UI", 1, 14));
		lblSemanaDesde1.setForeground(new java.awt.Color(255, 0, 0));
		lblSemanaDesde1
				.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblSemanaDesde1.setText("Mes");
		lblSemanaDesde1
				.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

		txtMes.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		txtMes
				.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
						new javax.swing.text.NumberFormatter(
								new java.text.DecimalFormat("#0"))));
		txtMes.setHorizontalAlignment(javax.swing.JTextField.LEFT);
		txtMes.setFont(new java.awt.Font("Segoe UI", 0, 14));

		lblFecha.setFont(new java.awt.Font("Segoe UI", 1, 14));
		lblFecha.setForeground(new java.awt.Color(255, 0, 0));
		lblFecha.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblFecha.setText("Fecha de liquidaci\u00f3n");

		txtFecha.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		try {
			txtFecha
					.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
							new javax.swing.text.MaskFormatter("##/##/####")));
		} catch (java.text.ParseException ex) {
			ex.printStackTrace();
		}
		txtFecha.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		txtFecha.setFont(new java.awt.Font("Segoe UI", 0, 14));

		progressbar.setStringPainted(true);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING,
																				false)
																		.addGroup(
																				layout
																						.createSequentialGroup()
																						.addComponent(
																								lblSemanaDesde1,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								179,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addPreferredGap(
																								javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtMes,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								72,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGroup(
																				layout
																						.createSequentialGroup()
																						.addComponent(
																								lblSemanaDesde,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								179,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addPreferredGap(
																								javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtSemanaDesde,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								72,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGroup(
																				layout
																						.createSequentialGroup()
																						.addComponent(
																								lblSemanaHasta,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								179,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addPreferredGap(
																								javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtSemanaHasta,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								72,
																								javax.swing.GroupLayout.PREFERRED_SIZE)))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addComponent(
																				lblFecha,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				158,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				txtFecha,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				90,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGap(117, 117, 117))
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup().addContainerGap(
										338, Short.MAX_VALUE).addComponent(
										btnOk).addContainerGap())
						.addGroup(
								layout.createSequentialGroup().addGap(20, 20,
										20).addComponent(progressbar,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										371, Short.MAX_VALUE).addContainerGap()));

		layout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { lblFecha, lblSemanaDesde,
						lblSemanaDesde1, lblSemanaHasta });

		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGap(25, 25, 25)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																lblSemanaDesde1)
														.addComponent(
																txtMes,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																26,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																lblSemanaDesde)
														.addComponent(
																txtSemanaDesde,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																26,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																txtSemanaHasta,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																26,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																lblSemanaHasta))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																txtFecha,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																25,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(lblFecha))
										.addGap(18, 18, 18)
										.addComponent(
												progressbar,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												32,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												25, Short.MAX_VALUE)
										.addComponent(btnOk).addContainerGap()));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	private Object DoLiquidacion(boolean toModiFy) {
		try {
			if (validateData()) {
				Integer cont = 0;
				Integer mes = ((Number) txtMes.getValue()).intValue();
				Integer semanadesde = ((Number) txtSemanaDesde.getValue())
						.intValue();
				Integer semanahasta = ((Number) txtSemanaHasta.getValue())
						.intValue();
				float baseimponible = 0;
				float importebonificacion = 0;

				
				if (toModiFy) {
					if (entity.EsUltimaLiquidacion(parent, mes)) {
						entity.LiquidacionDeleteByMes(parent, mes, false, false);
					}	
					else {
						Message.ShowValidateMessage(parent,
						"La liquidación no se ha generado porque hay liquidaciones de meses posteriores.");
						return null;
					}
				}
					
				List<?> cosecherosList = entity.CosecheroGetGrupos(this,
						semanadesde, semanahasta);

				if (cosecherosList.size() > 0) {
					progressbar.setMaximum(cosecherosList.size());
					updateStatus(cont);
					
					
					try {
						entity.LiquidacionInsertKilosInutilizados(parent,
								semanadesde, semanahasta);
					} catch (SQLException ex) {
						Message.ShowErrorMessage(parent,
								"LiquidacionInsertKilosInutilizados", ex
										.getMessage());
						return null;
					}
				
					Transaction transaction = session.getSession()
							.beginTransaction();
					for (Object o : cosecherosList) {
						Liquidaciones liquidacion = new Liquidaciones();
						Cosecheros cosechero = (Cosecheros) o;
						try {
							baseimponible = entity
									.LiquidacionGetBaseImponible(parent,
											mes, semanadesde, semanahasta,
											cosechero.getId()
													.getIdCosechero());
						} catch (SQLException ex) {
							Message.ShowErrorMessage(parent,
									"LiquidacionGetBaseImponible", ex
											.getMessage());
							transaction.rollback();
							return null;
						}
						try {
							importebonificacion = entity
									.LiquidacionImporteBonificacion(parent,
											mes, semanadesde, semanahasta,
											cosechero.getId()
													.getIdCosechero());
						} catch (SQLException ex) {
							Message.ShowErrorMessage(parent,
									"LiquidacionGetBaseImponible", ex
											.getMessage());
							transaction.rollback();
							return null;
						}
						importebonificacion = (float) (importebonificacion * 1.00);
						baseimponible = (float) (baseimponible * 1.00);
						Integer numerofactura = entity.newId(this,
								"Liquidaciones", "id.numeroFactura");
						LiquidacionesId liquidacionid = new LiquidacionesId();
						liquidacionid.setNumeroFactura(numerofactura);
						liquidacionid.setEjercicios(session.getEjercicio());
						liquidacionid.setEmpresas(session.getEmpresa());
						liquidacion.setId(liquidacionid);
						liquidacion.setIdCosechero(cosechero.getId()
								.getIdCosechero());
						liquidacion.setMes(((Number) txtMes.getValue())
								.intValue());

						int tipoigic = 0;
						if (cosechero.getTipoIgic() != null)
							tipoigic = cosechero.getTipoIgic();
						liquidacion.setTipoIgic(tipoigic);

						int tipoirpf = 0;
						if (cosechero.getTipoIrpf() != null)
							tipoirpf = cosechero.getTipoIrpf();
						liquidacion.setTipoIrpf(tipoirpf);
						SimpleDateFormat df = new SimpleDateFormat(
								PreferencesUI.DateFormat);
						Date value = df.parse(txtFecha.getText());
						liquidacion.setFecha(value);
						liquidacion.setBaseImponible(baseimponible);
						float importeigic = baseimponible * tipoigic / 100;
						liquidacion.setImporteIgic(importeigic);
						float importeirpf = (baseimponible + importeigic)
								* tipoirpf / 100;
						liquidacion.setImporteIrpf(importeirpf);
						liquidacion
								.setImporteBonificacion(importebonificacion);
						liquidacion.setLmd(new Date());
						liquidacion.setSid("Santi");
						liquidacion.setVersion(1);
						session.getSession().replicate(liquidacion,
								ReplicationMode.OVERWRITE);
						session.getSession().saveOrUpdate(liquidacion);
						session.getSession().flush();
						updateStatus(cont++);
					}
					if (!transaction.wasCommitted()) {
						transaction.commit();
					}
					session.getSession().close();
					
					try {
						entity.LiquidacionGenerate(parent, mes, semanadesde,
								semanahasta);
					} catch (SQLException ex) {
						Message.ShowErrorMessage(parent, "LiquidacionGenerate",
								ex.getMessage());
						return null;
					}
					updateStatus(cont++);
					Message.ShowValidateMessage(parent,
							"La liquidación se ha generado con éxito.");
					return "Completado";
				} else {
					Message.ShowValidateMessage(parent,
							"No exiate ningún cosechero para liquidar.");
				}
			}
			return "Completado";
		} catch (RuntimeException he) {
			Message.ShowRuntimeError(parent,
					"FrmGeneraLiquidacion.DoLiquidacion()", he);
			return "Error";
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	private void btnOkMousePressed(java.awt.event.MouseEvent evt) {
		try {

			boolean toContinue = false;

			List<?> liquidacionesList = entity.LiquidacionesFindByMes(this,
					((Number) txtMes.getValue()).intValue());
			if (liquidacionesList.size() > 0) {
				toModify = true;
				Object[] botones = { "Si", "No" };
				int respuestavalue = JOptionPane
						.showOptionDialog(
								null,
								"La liquidación para el mes indicado ya ha sido generada, ¿está seguro de volver a generarla?",
								"", JOptionPane.DEFAULT_OPTION,
								JOptionPane.WARNING_MESSAGE, null, botones,
								botones[0]);

				if (respuestavalue == 0) {
					toContinue = true;
				}
			} else {
				toContinue = true;
				toModify = false;
			}

			if (toContinue) {
				btnOk.setEnabled(false);
				progressbar.setVisible(true);
				worker = new SwingWorker() {
					public Object construct() {
						return DoLiquidacion(toModify);
					}

					public void finished() {
						btnOk.setEnabled(true);
					}
				};
				worker.start();
			}
		} catch (RuntimeException he) {
			Message.ShowRuntimeError(this,
					"FrmGeneraLiquidacion.btnOkMousePressed()", he);
		}
	}

	void updateStatus(final int i) {
		Runnable doSetProgressBarValue = new Runnable() {
			public void run() {
				progressbar.setValue(i);
			}
		};
		SwingUtilities.invokeLater(doSetProgressBarValue);
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton btnOk;
	private javax.swing.JLabel lblFecha;
	private javax.swing.JLabel lblSemanaDesde;
	private javax.swing.JLabel lblSemanaDesde1;
	private javax.swing.JLabel lblSemanaHasta;
	private javax.swing.JProgressBar progressbar;
	private javax.swing.JFormattedTextField txtFecha;
	private javax.swing.JFormattedTextField txtMes;
	private javax.swing.JFormattedTextField txtSemanaDesde;
	private javax.swing.JFormattedTextField txtSemanaHasta;
	// End of variables declaration//GEN-END:variables

}