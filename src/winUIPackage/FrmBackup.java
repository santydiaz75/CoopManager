/*
 * FrmParamFacturas.java
 *
 * Created on __DATE__, __TIME__
 */

package winUIPackage;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;

import entitiesPackage.Message;

/**
 *
 * @author  __USER__
 */
public class FrmBackup extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private java.awt.Frame parent;
	SwingWorker worker;

	/** Creates new form FrmParamFacturas */
	public FrmBackup(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		try {
			this.parent = parent;
			initComponents();
			progressbar.setVisible(false);
		} catch (RuntimeException he) {
			Message.ShowRuntimeError(parent, "FrmBackup()", he);
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		btnOk = new javax.swing.JButton();
		progressbar = new javax.swing.JProgressBar();
		lblApellidos = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Copia de seguridad de la base de datos");
		setResizable(false);

		btnOk.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/imagesPackage/ok.png"))); // NOI18N
		btnOk.setToolTipText("Aceptar");
		btnOk.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
		btnOk.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				btnOkMousePressed(evt);
			}
		});

		progressbar.setMaximum(1000);
		progressbar.setStringPainted(true);

		lblApellidos.setFont(new java.awt.Font("Segoe UI", 1, 14));
		lblApellidos.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
		lblApellidos
				.setText("A continuaci\u00f3n se realizar\u00e1 la copia de seguridad de la base de datos");
		lblApellidos
				.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																btnOk,
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																progressbar,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																472,
																Short.MAX_VALUE)
														.addComponent(
																lblApellidos,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																472,
																Short.MAX_VALUE))
										.addContainerGap()));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGap(36, 36, 36)
										.addComponent(lblApellidos)
										.addGap(18, 18, 18)
										.addComponent(
												progressbar,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												32,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												25, Short.MAX_VALUE)
										.addComponent(btnOk).addContainerGap()));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	private Object DoBackup(File backupFile) {
		try {
			FileWriter fw = new FileWriter(backupFile);
			/*objeto que escribira sobre el backup archivo*/
			Process backup;
			Runtime runtime = Runtime.getRuntime();
			backup = runtime
					.exec(System.getenv("MYSQLPATH")
							+ "\\bin\\mysqldump --opt --password=demoli23 --user=root coopmanagerdb");
			/*Process es el que ejecuta el comando para buscar el mysqldump.exe*/
			InputStreamReader irs = new InputStreamReader(backup
					.getInputStream());
			BufferedReader br = new BufferedReader(irs);
			/* se escribe sobre el archivo*/
			String line;
			Integer cont = 0;
			updateStatus(cont);
			while ((line = br.readLine()) != null) {
				updateStatus(cont++);
				fw.write(line + "\n");
			}
			fw.close();
			irs.close();
			br.close();
			Message.ShowInformationMessage(this,
					"Archivo de copia de seguridad generado con éxito");
			return "Completado";

		} catch (RuntimeException he) {
			Message.ShowRuntimeError(parent,
					"Error en el proceso de copia de seguridad", he);
			return "Error";
		} catch (IOException e) {
			Message.ShowIOError(parent,
					"Error en el proceso de copia de seguridad", e);
			return "Error";
		}
	}

	private void btnOkMousePressed(java.awt.event.MouseEvent evt) {
		try {
			SimpleDateFormat dateformat = new SimpleDateFormat("yyyyMMdd");
			JFileChooser FileChooser = new JFileChooser();
			FileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			int returnVal = FileChooser.showOpenDialog(this);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				progressbar.setVisible(true);
				btnOk.setEnabled(false);
				Calendar calendario = Calendar.getInstance();
				final File backupFile = new File(String.valueOf(FileChooser
						.getSelectedFile())
						+ "\\coopmanager"
						+ dateformat.format(calendario.getTime()) + ".sql");
				/*backupFile se utiliza para indicarle la ubicacion y nombre del archivo que contendra el backup con la extencion .sql*/

				worker = new SwingWorker() {
					public Object construct() {
						return DoBackup(backupFile);
					}

					public void finished() {
						btnOk.setEnabled(true);
						dispose();
					}
				};
				worker.start();
			}
		} catch (RuntimeException he) {
			Message.ShowRuntimeError(this,
					"FrmBackup.btnOkMousePressed()", he);
		}

	}

	void updateStatus(final int i) {
		Runnable doSetProgressBarValue = new Runnable() {
			public void run() {
				progressbar.setValue(i);
			}
		};
		SwingUtilities.invokeLater(doSetProgressBarValue);
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton btnOk;
	private javax.swing.JLabel lblApellidos;
	private javax.swing.JProgressBar progressbar;
	// End of variables declaration//GEN-END:variables

}